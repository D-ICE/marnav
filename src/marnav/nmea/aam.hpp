#ifndef __NMEA__AAM__HPP__
#define __NMEA__AAM__HPP__

#include "sentence.hpp"
#include <marnav/utils/optional.hpp>

namespace marnav
{
namespace nmea
{

/// @brief AAM - Waypoint Arrival Alarm
///
/// This sentence is generated by some units to indicate the status of arrival (entering
/// the arrival circle, or passing the perpendicular of the course line) at the destination waypoint.
///
/// @code
///        1 2 3   4 5    6
///        | | |   | |    |
/// $--AAM,A,A,x.x,N,c--c*hh<CR><LF>
/// @endcode
///
/// Field Number:
///
///  1. Status, BOOLEAN, A = Arrival circle entered
///  2. Status, BOOLEAN, A = perpendicular passed at waypoint
///  3. Arrival circle radius
///  4. Units of radius, nautical miles
///  5. Waypoint ID
///  6. Checksum
///
/// Example: <tt>$GPAAM,A,A,0.10,N,WPTNME*43</tt>
///
/// WPTNME is the waypoint name.
///
class aam : public sentence
{
public:
	constexpr static const sentence_id ID = sentence_id::AAM;
	constexpr static const char * TAG = "AAM";

	aam();
	aam(const aam &) = default;
	aam & operator=(const aam &) = default;

	static std::unique_ptr<sentence> parse(const std::string & talker,
		const std::vector<std::string> & fields) throw(std::invalid_argument);

protected:
	virtual std::vector<std::string> get_data() const override;

private:
	utils::optional<char> arrival_circle_entered;
	utils::optional<char> perpendicualar_passed;
	utils::optional<double> arrival_circle_radius;
	utils::optional<char> arrival_circle_radius_unit;
	utils::optional<std::string> waypoint_id;

public:
	decltype(arrival_circle_entered) get_arrival_circle_entered() const
	{
		return arrival_circle_entered;
	}
	decltype(perpendicualar_passed) get_perpendicualar_passed() const
	{
		return perpendicualar_passed;
	}
	decltype(arrival_circle_radius) get_arrival_circle_radius() const
	{
		return arrival_circle_radius;
	}
	decltype(arrival_circle_radius_unit) get_arrival_circle_radius_unit() const
	{
		return arrival_circle_radius_unit;
	}
	decltype(waypoint_id) get_waypoint_id() const { return waypoint_id; }

	void set_arrival_circle_entered() { arrival_circle_entered = status::OK; }
	void set_perpendicular_passed() { perpendicualar_passed = status::OK; }
	void set_arrival_circle_radius(double t);
	void set_waypoint_id(const std::string & id);
};
}
}

#endif
