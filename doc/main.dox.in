/**

\mainpage Library for Maritime Navigation
\version @PROJECT_VERSION@ (@GIT_BRANCH@ / @GIT_COMMIT_HASH@)
\copyright (c) 2016 Mario Konrad \<mario.konrad@gmx.net\>

\tableofcontents

\section sec_abstract Abstract

This is a C++11 library for maritime navigation purposes.
It supports (partially):
- \ref subsec_features_nmea
- \ref subsec_features_ais
- \ref subsec_features_seatalk
- Reading data from serial ports (NMEA-0183, SeaTalk)
- Basic geodesic functions, suitable for martime navigation.

See a more detailed list: \ref sec_features


\section sec_goals Goals

There are already implementaions for reading and writing NMEA-0183 or AIS.
The goal of this library is
- to have an implementation in modern C++ (C++11)
- easy to use API (std lib like, integrating well)
- unit tested (high test coverage)
- trivial integration into projects (liberal license, as few dependencies as possible)
- (more or less) well documented


\section sec_features Features

It supports (partially):
- \ref subsec_features_nmea
- \ref subsec_features_ais
- \ref subsec_features_seatalk
- Reading data from serial ports (NMEA, SeaTalk)
- Basic geodesic functions, suitable for martime navigation.
  - Calculation of CPA (closest point of approach)
    and TCPA (time to closest point of approach)
  - Distance of two points on a sphere
  - Distance of two points on an ellipsoid using formula of Vincenty
  - Distance of two points on an ellipsoid using formula of Lambert

\subsection subsec_features_nmea NMEA

Supported sentences for NMEA-0183 (read and write):
- AAM: Waypoint Arrival Alarm
- ALM: GPS Almanac Data
- APB: Autopilot Sentence "B"
- BOD: Bearing - Waypoint to Waypoint
- BWC: Bearing & Distance to Waypoint - Geat Circle
- BWR: Bearing and Distance to Waypoint - Rhumb Line
- BWW: Bearing - Waypoint to Waypoint
- DBT: Depth Below Transducer
- DPT: Depth of Water
- DSC: Digital Selective Calling Information (**experimental**)
- DSE: Extended DSC (**experimental**)
- DTM: Datum Reference
- FSI: Frequency Set Information
- GBS: GPS Satellite Fault Detection
- GGA: Global Positioning System Fix Data
- GLC: Geographic Position, Loran-C
- GLL: Geographic Position - Latitude/Longitude
- GNS: Fix data
- GRS: GPS Range Residuals
- GSA: Geographic Position - Latitude/Longitude
- GST: GPS Pseudorange Noise Statistics
- GSV: Satellites in view
- GTD: Geographic Location in Time Differences
- HDG: Heading - Deviation & Variation
- HFB: Trawl Headrope to Footrope and Bottom
- HSC: Heading Steering Command
- ITS: Trawl Door Spread 2 Distance
- LCD: Loran-C Signal Data
- MSK: Control for a Beacon Receiver
- MSS: Beacon Receiver Status
- MTW: Mean Temperature of Water
- MWD: Wind Direction and Speed
- MWV: Wind Speed and Angle
- OSD: Own Ship Data
- RMA: Recommended Minimum Navigation Information
- RMB: Recommended Minimum Navigation Information
- RMC: Recommended Minimum Navigation Information
- ROT: Rate Of Turn
- RPM: Revolutions
- RSA: Rudder Sensor Angle
- RSD: RADAR System Data (**experimental**)
- RTE: Routes
- SFI: Scanning Frequency Information
- TDS: Trawl Door Spread Distance
- TFI: Trawl Filling Indicator
- TLL: Target Latitude and Longitude
- TPC: Trawl Position Cartesian Coordinates
- TPR: Trawl Position Relative Vessel
- TPT: Trawl Position True
- TTM: Tracked Target Message
- VBW: Dual Ground/Water Speed
- VDM: AIS VHF Data-Link Message
- VDO: AIS VHF Data-Link Own-Vessel Report
- VDR: Set and Drift
- VHW: Water speed and heading
- VLW: Distance Traveled through Water
- VTG: Track made good and Ground speed
- VWR: Relative Wind Speed and Angle.
- VPW: Speed - Measured Parallel to Wind
- WCV: Waypoint Closure Velocity
- WNC: Distance - Waypoint to Waypoint
- WPL: Waypoint Location
- XDR: Transducer Measurement
- XTE: Cross-Track Error, Measured
- XTR: Cross Track Error - Dead Reckoning
- ZDA: Time & Date - UTC, day, month, year and local time zone
- ZDL: Time and Distance to Variable Point
- ZFO: UTC & Time from origin Waypoint
- ZTG: UTC & Time to Destination Waypoint

Obsolete (according to the standard) but implemented:
- DBK: Depth Below Keel
- HDM: Heading - Magnetic (obsolete as of 2009)
- R00: Waypoints in active route

Vendor Extensions:
- PGRME: Garmin Estimated Error

\subsection subsec_features_ais AIS

Supported messages for AIS (decode and encode):
- Type 01: Position Report Class A
- Type 02: Position Report Class A (Assigned Schedule)
- Type 03: Position Report Class A (Response to Interrogation)
- Type 04: Base Station Report
- Type 05: Static and Voyage Related Data
- Type 09: Standard SAR Aircraft Position Report
- Type 10: UTC/Date Inquiry
- Type 11: UTC/Date Response
- Type 18: Standard Class B CS Position Report
- Type 19: Extended Class B CS Position Report
- Type 21: Aid-to-Navigation Report
- Type 22: Channel Management
- Type 23: Group Assignment Command
- Type 24: Static Data Report (part A and B, norma and auxiliary vessel)

\subsection subsec_features_seatalk SeaTalk (Raymarine device communication)

Suported messages for SeaTalk (decode and encode):
- Type 00: depth below transducer
- Type 01: equipment id
- Type 05: Engine RPM and PITCH
- Type 10: apparent wind angle
- Type 11: apparent wind speed
- Type 20: speed through water
- Type 21: trip mileage
- Type 22: total mileage
- Type 23: water temperature 1
- Type 24: Display unit for Mileage and Speed
- Type 25: total and trip log
- Type 26: Speed through Water
- Type 27: water temperature 2
- Type 30: Set Lamp Intensity
- Type 36: Cancel MOB condition
- Type 38: Codelock data (**experimental**)
- Type 50: LAT Postion
- Type 51: LON Postion
- Type 52: Speed over Ground
- Type 53: Magnetic Course in Degrees
- Type 54: GMT Time
- Type 56: Date
- Type 58: LAT/LON
- Type 59: Set Count Down Timer (sent by ST60)
- Type 65: Select Fathom display unit for depth display (see message 00)
- Type 66: Wind Alarm
- Type 6C: Second equipment-ID
- Type 86: Keystroke
- Type 87: Response Level
- Type 89: Compass heading (sent by ST40 compass instrument)


\section sec_devenv Development Environment
This page describes the requirements in order to build the library.

\subsection subsec_devenv_requirements Requirements
Compiler supported (older/others may work, but not tested):
- GCC 4.9
- GCC 5.1
- GCC 5.2
- GCC 5.3
- Clang 3.6
- Clang 3.7

Tools needed to build the library:
- cmake 3.2 or newer
- clang-format 3.7 or newer

Tools needed to build the documentation:
- doxygen
- graphviz
- LaTeX (there are formulas!)

optional (used for development only):
- lcov / genhtml, c++filt
- cppcheck
- clang-analyze 3.7
- ctags, cscope

optional (no core dependency):
- Boost.ASIO (used only for some examples)
- Qt 5 (used only for some examples)

There are no other dependencies despite the standard library (C++11) to build this library.

Other compilers may work, however untested.

\subsection subsec_devenv_build Build
For normal, debug and release builds use the standard cmake CMAKE_BUILD_TYPE variable.
For example a debug build:

Full information developpers build:
\code
	mkdir build
	cd build
	cmake -DCMAKE_BUILD_TYPE=Coverage ..
	make
	make coverage doc cppcheck
\endcode

Debug build:
\code
	mkdir build
	cd build
	cmake -DCMAKE_BUILD_TYPE=Debug ..
	make
\endcode

If you like to perform code coverage using the unit tests, do:
\code
	mkdir build
	cd build
	cmake -DCMAKE_BUILD_TYPE=Coverage ..
	make
	make coverage
\endcode

As packaging system, cpack is used. Do after build:
\code
	make package
\endcode

or for individual package types:

\code
	cpack -G TGZ
	cpack -G DEB
\endcode

Build documentation:
\code
	mkdir build
	cd build
	cmake ..
	make doc
\endcode

After proper building and execution:
- [Code Coverage](../coverage/index.html)
- [cppcheck](../cppcheck.txt)
- [Doxygen Warnings](../doxygen-warnings.txt)


\subsection subsec_devenv_buildoptions Build Options
The following build types (-DCMAKE_BUILD_TYPE=x) are possible:
- Debug
- Release
- Coverage

Build options:
- `ENABLE_STATIC` : enables static build, if `OFF`, a shared library is being built.
  Default: `ON`
- `ENABLE_WARNING_HELL` : enables _much_ more warnings, used for development purposes.
  Currently implemented only for GCC.  Default is `OFF`
- `ENABLE_PROFILING` : enables profiling for `gprof`

Features:
- `ENABLE_AIS ` : enables AIS support. Default: `ON`
- `ENABLE_SEATALK` : enables SeaTalk support. Default: `ON`


\subsection subsec_devenv_clang_static_analysis Static Analysis with Clang
There is a script ```bin/static-analysis-clang``` for doing this, or do it manually:
\code
	mkdir build
	cd build
	cmake -DCMAKE_CXX_COMPILER=/usr/share/clang/scan-build-3.7/c++-analyzer ..
	scan-build-3.7 -o doc/analysis --use-analyzer=/usr/bin/clang++-3.7 make
\endcode

After the build, ```scan-build``` will tell you what to do in order to inspect
the findings.


\subsection subsec_devenv_benchmarks Perform Benchmarks
Build in ```Release``` mode, perform individual benchmarks:
\code
	mkdir build
	cd build
	cmake -DCMAKE_BUILD_TYPE=Release ..
	make -j 8
	test/benchmark_nmea_split
\endcode


\section sec_examples Examples

\subsection subsec_examples_nmea NMEA-0183

\subsubsection subsubsec_examples_nmea_parse Parse a NMEA sentence
\code{.cpp}
	auto sentence = nmea::make_sentence(
		"$GPRMC,201034,A,4702.4040,N,00818.3281,E,0.0,328.4,260807,0.6,E,A*17");
	std::cout << sentence->tag() << "\n";
	auto rmc = nmea::sentence_cast<nmea::rmc>(sentence);
	std::cout << "latitude : " << nmea::to_string(rmc->get_lat()) << "\n";
	std::cout << "longitude: " << nmea::to_string(rmc->get_lon()) << "\n";
\endcode

\subsubsection subsubsec_examples_nmea_write Write a NMEA sentence
\code{.cpp}
	nmea::mtw mtw;
	mtw.set_temperature(22.5);
	std::string data = nmea::to_string(mtw);
\endcode

\subsection subsec_examples_ais AIS

\subsubsection subsubsec_examples_ais_read Process AIS related NMEA messages
Example 1:
\code{.cpp}
	// collect NMEA data of all fragments, from whatever source
	std::vector<std::unique_ptr<nmea::sentence>> v;
	v.push_back(nmea::make_sentence("!AIVDM,1,1,,B,177KQJ5000G?tO`K>RA1wUbN0TKH,0*5C"));

	// collect payload from all fragments
	auto payload = nmea::collect_payload(v.begin(), v.end());

	// make AIS message from payload
	auto msg = ais::make_message(payload);

	// process concrete AIS message
	auto pos_report = ais::message_cast<ais::message_01>(msg);
	auto mmsi = pos_report->get_mmsi();
\endcode

Example 2:
\code{.cpp}
	using namespace marnav;

	// received sentences
	const std::vector<std::string> received_strings
		= {"!AIVDM,2,1,3,B,55P5TL01VIaAL@7WKO@mBplU@<PDhh000000001S;AJ::4A80?4i@E53,0*3E",
			"!AIVDM,2,2,3,B,1@0000000000000,2*55"};

	// parse NMEA sentences
	std::vector<std::unique_ptr<nmea::sentence>> sentences;
	for (auto const & txt : received_strings) {
		auto sentence = nmea::make_sentence(txt);
		if (sentence->id() == nmea::sentence_id::VDM) {
			sentences.push_back(std::move(sentence));
		}
	}

	// parse and and process AIS messags
	auto payload = nmea::collect_payload(sentences.begin(), sentences.end());
	auto message = ais::make_message(payload);
	if (message->type() == ais::message_id::static_and_voyage_related_data) {
		auto report = ais::message_cast<ais::message_05>(message);
		std::cout << "shipname: " << report->get_shipname() << "\n";
		std::cout << "callsign: " << report->get_callsign() << "\n";
	}
\endcode

\subsubsection subsubsec_examples_ais_create Create NMEA sentences from AIS data
\includelineno examples/create_nmea_from_ais.cpp

\subsubsection subsubsec_examples_ais_create_2 Create NMEA sentences from AIS data using make_vdms
\includelineno examples/create_nmea_from_ais_2.cpp

\subsection subsec_examples_utils Utils

\subsubsection subsubsec_examples_utils_bitset_iterate Iterate through a bitset
\includelineno examples/bitset_iterate.cpp

\subsection subsec_examples_complete Complete examples
All those examples are to be found in the directory `examples`.

\subsubsection subsubsec_examples_file_parse_nmea Parse NMEA from a string
\includelineno examples/parse_nmea.cpp

\subsubsection subsubsec_examples_file_read_nmea Read NMEA from serial port
\includelineno examples/read_nmea.cpp

\subsubsection subsubsec_examples_file_read_nmea_boostasio Read NMEA from serial port using Boost.ASIO
\includelineno examples/read_nmea_boostasio.cpp

\subsubsection subsubsec_examples_file_read_seatalk Read SeaTalk from serial port
\includelineno examples/read_seatalk.cpp

\subsubsection subsubsec_examples_file_read_ais Read AIS data from string
\includelineno examples/read_ais.cpp

\subsubsection subsubsec_examples_file_nmea_multiplexer Run a NMEA multiplexer
\includelineno examples/nmea_multiplexer.cpp

\subsubsection subsubsec_examples_file_select Using select with marnav::io::device
\includelineno examples/select.cpp

\subsubsection subsubsec_examples_file_seatalk_to_nmea Simple SeaTalk to NMEA converter
\includelineno examples/simple_seatalk_nmea_converter.cpp

\subsubsection subsubsec_examples_file_qt5 Qt5 GUI application reading NMEA
\includelineno examples/qtnmeadiag/main.cpp
\includelineno examples/qtnmeadiag/MainWindow.hpp
\includelineno examples/qtnmeadiag/MainWindow.cpp

\subsubsection subsubsec_examples_file_tcp_forward Simple NMEA receiver and forward to a TCP server
\includelineno examples/serial_to_tcp.cpp

\subsection subsec_examples_library Library
\subsubsection subsubsec_examples_lib_cmake Using the library in a cmake environment
If you are using this library within a cmake environment, you might
want to use ``find_package``.

Build and install the library:
\code
	mkdir build
	cd build
	mkdir local
	cmake -DCMAKE_INSTALL_PREFIX=`pwd`/local ..
	make
	make install
\endcode

Now the installation of the library is in the directory ``marnav/build/local``.

To build the test program:
\code
	cd build
	export marnav_DIR=`pwd`/local
	mkdir test
	cd test
	cmake ../../example/library
	make
	./foobar
\endcode

The ``export`` is necessary because cmake would not find the necessary
configuration of the library, which is installed in ``.../lib/marnav/cmake``.

The tarball also contains the configuration files:
\code
	tar -xf marnav-0.3.1-Linux.tar.gz
	export marnav_DIR=`pwd`/marnav-0.3.1-Linux
	mkdir test
	cd test
	cmake ../../example/library
	make
	./foobar
\endcode

You might want to consider extending the cmake modules path (in your ``CMakeLists.txt``) accordingly.


\section sec_overview Technical Overview

\subsection subsec_overview_directory Directory Overview
This section explains the directory structure.

\verbatim
root
+- bin
+- cmake
+- doc
+- examples
+- extern
+- src
|  +- marnav
|     +- ais
|     +- geo
|     +- io
|     +- math
|     +- nmea
|     +- seatalk
|     +- utils
+- test
\endverbatim

- \c bin      : helper scripts
- \c cmake    : CMake Modules
- \c doc      : Documentation
- \c examples : Examples included in the documentation and build as well.
                This examples use the library to demonstrate its usage.
- \c extern   : External projects and resources used by the library.
- \c test     : All tests
- \c src      : Complete source of the library, source and header files.
                Packages are grouped in their own subdirectory, named
                accordingly (e.g. \c marnav/nmea).

                \b Note: both, private and public headers of the library are
                located here.

   - \c ais     : all AIS related stuff. Note that despite the AIS builds on
                  the NMEA protocol (VDM, VDO sentences), the package does not
                  have any dependencies to the \c nmea package.
   - \c geo     : collection of geographic and geodesic functions
   - \c io      : input output stuff, mainly for NMEA and SeaTalk. Please note,
                  that this package is not mandatory. It is perfectly fine
                  to use the \c nmea package without \c io.
   - \c math    : generic math stuff
   - \c nmea    : everything NMEA-0183 related
   - \c seatalk : everything SeaTalk related, except IO.
   - \c utils   : common utils


\subsection subsec_overview_package_dependencies Package dependencies
The directory structure underneath \c src reflects the packages.
Every package has its own namespace.

\dot
	digraph G {
		node [shape=record, fonthame=Helvetica, fontsize=10];
		ais -> { geo utils };
		nmea -> { geo utils };
		seatalk -> { utils };
		io -> { nmea seatalk utils };
		geo -> { math };
	}
\enddot

Not shown in the picture:
- The standard library
- Unittests (using GoogleTest/GoogleMock)
- Benchmarking (using Google's Benchmark)
- Examples (some of them use boost.asio or Qt5)


\subsection subsec_overview_general General Stuff

The code of the library is quite defensive. This should usually not
be a problem, because the (usual) environment of a library as this
is not high performance. Some additional checks will not hurt too much.


\subsection subsec_overview_naming Naming Conventions

Everything is in small case (types, classes, structs, member functions,
member data, etc.) with underscores (snakes).

There are occasional exceptions of constants in all captial letters.
For the future, this practice is discouraged.

Reason:
- other libraries do this too (std, boost)
- I like it this way


\subsection subsec_overview_formatting Formatting

Code formatting is done using \c clang-format, using the provided
configuration file (\c .clang-format)


\subsection subsec_overview_header_inclusion Order of Header inclusion

In general the order is from system headers to project headers. The
more private, the later the inclusion.

For header files:
- system headers
- thrid party library headers
- marnav headers

For translation units:
- its own header
- system headers
- thrid party library headers
- marnav headers

With the exception of the translation unit's own header file, are all
header included with full qualified path.





\section sec_authors Authors
(extracted from git repository, sorted alphabetically)

@AUTHORS_LIST@


\section sec_links Links

A (non-complete) collection of resources from where information was gathered.

- [NMEA Revealed](http://www.catb.org/gpsd/NMEA.html) (by Eric S. Raymond)
- [NMEA FAQ](http://www.kh-gps.de/nmea.faq)
- [it-digin's blog](http://www.it-digin.com/blog/?cat=4)
- [AIVDM/AIVDO Protocol decoding](http://www.catb.org/gpsd/AIVDM.html) (by Eric S. Raymond)
- [DSC Position Request](http://www.thehulltruth.com/marine-electronics-forum/43945-dsc-position-request.html)
- [NMEA-0183 Sentences DSC,DSE](http://www.cruisersforum.com/forums/f13/nmea-0183-sentences-dsc-dse-124887.html)
- [SerialMon - NMEA 0183 Protocol](http://www.serialmon.com/protocols/nmea0183.html)
- [SeaTalk Reference](http://thomasknauf.de/seatalk.htm) (by Thomas Knauf)
- [Navigation Center - AIS Standard Class B Equipment Position Report](http://www.navcen.uscg.gov/?pageName=AISMessagesB)
- [GPS Forums](http://www.gps-forums.net)
- [NMEA Datensaetze](http://www.nmea.de/nmea0183datensaetze.html)


\section sec_license License

(BSD)

\verbatim
Copyright (c) 2016, Mario Konrad
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. All advertising materials mentioning features or use of this software
   must display the following acknowledgement:
   This product includes software developed by Mario Konrad.
4. Neither the name of the software nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\endverbatim

*/
