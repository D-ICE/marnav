#!/bin/bash -eu

export SCRIPT_BASE=$(dirname `readlink -f $0`)
export BASE=${SCRIPT_BASE}/..
export CONFIG_BASE=${SCRIPT_BASE}/buildconf.d

# takes default value if provided by the environment
export BUILD_DIR=${BUILD_DIR:-${BASE}/build}

# ask system about number of processors, accept already specified number
export NUM_PROC=${NUM_PROC:-$(cat /proc/cpuinfo | grep -E "^processor" | wc -l)}

function valid_target()
{
	for t in ${CONFIG_BASE}/* ; do
		if [ "x$1" == "x$(basename $t)" ] ; then
			echo "found"
			return
		fi
	done
	echo "notfound"
}

# read command line arguments

args=$(getopt \
	--options "hl" \
	--longopt "help" \
	--longopt "list" \
	--longopt "prepare" \
	--longopt "build" \
	-- "$@")
if [ $? != 0 ] ; then
	echo "error: parameters. aborting." >&2
	exit 1
fi

eval set -- "${args}"

# handle arguments

target=""
only_prepare="no"
only_build="no"
while [ $# -ne 0 ] ; do
	case "$1" in
		--help|-h)
			echo ""
			echo "usage: $(basename $0) [option] [target]"
			echo ""
			echo "options:"
			echo "   --help|-h  : print help information"
			echo "   --list|-l  : list all targets"
			echo "   --prepare  : prepares the build, does not build"
			echo "   --build    : prepares and builds, does not perform tests"
			echo ""
			exit 0
			;;
		--list|-l)
			for t in ${CONFIG_BASE}/* ; do
				echo $(basename $t)
			done
			exit 0
			;;
		--prepare)
			only_prepare="yes"
			;;
		--build)
			only_build="yes"
			;;
		*)
			if [ $# -gt 1 ] ; then
				target="$2"
			fi
			;;
	esac
	shift
done

# check specified target

if [ -z "$target" ] ; then
	echo "error: no target specified. aborting." >&2
	exit 1
fi

if [ $(valid_target "$target") != "found" ] ; then
	echo "error: invalid target specified: $target. aborting." >&2
	exit 1
fi

# check for tools
if [ -z "$(which cmake)" ] ; then
	echo "error: no cmake found. aborting."
	exit 1
fi
if [ -z "$(which make)" ] ; then
	echo "error: no make found. aborting."
	exit 1
fi

# prepare
if [ -d ${BUILD_DIR} ] ; then
	rm -fr ${BUILD_DIR}
fi
mkdir -p ${BUILD_DIR}
cd ${BUILD_DIR}
cmake -G "Unix Makefiles" \
	-DCMAKE_INSTALL_PREFIX=${BUILD_DIR}/local \
	$(cat ${CONFIG_BASE}/${target}) \
	-DCMAKE_EXPORT_COMPILE_COMMANDS=YES \
	${BASE}

# only prepare, do not build or test
if [ "$only_prepare" == "yes" ] ; then exit 0 ; fi

# build
cmake --build . -- -j ${NUM_PROC}

# only build, do not test
if [ "$only_build" == "yes" ] ; then exit 0 ; fi

# perform tests if not disabled
if [[ $(cat "${CONFIG_BASE}/${target}" | grep -E "ENABLE_TESTS=OFF") ]] ; then
	echo "tests disabled"
else
	cmake --build . --target unittest
	cmake --build . --target test
fi

